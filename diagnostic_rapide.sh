#!/bin/bash

# ==========================================
# DIAGNOSTIC RAPIDE - NEXUS R√âUSSITE  
# ==========================================

echo "üîç DIAGNOSTIC RAPIDE DES ERREURS POTENTIELLES"
echo "=============================================="

PROJECT_ROOT="/home/alaeddine/Documents/NSI_cours_accompagnement/nexus-reussite"

# 1. V√©rification de la structure
echo ""
echo "üìÅ Structure du projet :"
ls -la "$PROJECT_ROOT" | head -10

# 2. V√©rification des fichiers critiques
echo ""
echo "üîç Fichiers critiques :"
critical_files=(
    "backend/src/config.py"
    "backend/src/main_production.py" 
    "backend/requirements.txt"
    "frontend/package.json"
    "frontend/vite.config.js"
    "docker-compose.yml"
)

for file in "${critical_files[@]}"; do
    if [ -f "$PROJECT_ROOT/$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file MANQUANT"
    fi
done

# 3. Test rapide Python
echo ""
echo "üêç Test Python rapide :"
cd "$PROJECT_ROOT/backend"

if [ -f "../.venv/bin/activate" ]; then
    source ../.venv/bin/activate
    
    python -c "
import sys
sys.path.insert(0, 'src')
try:
    from config import get_config, validate_config
    print('‚úÖ Imports config OK')
    
    config_obj = get_config()
    print('‚úÖ get_config() OK')
    
    report = validate_config(config_obj)
    print(f'‚úÖ validate_config() OK - Status: {report[\"status\"]}')
    
except Exception as e:
    print(f'‚ùå Erreur Python: {e}')
" 2>/dev/null || echo "‚ùå Test Python √©chou√©"
else
    echo "‚ö†Ô∏è  Environnement virtuel non trouv√©"
fi

# 4. Test rapide Frontend
echo ""
echo "‚öõÔ∏è  Test Frontend rapide :"
cd "$PROJECT_ROOT/frontend"

if [ -f "package.json" ]; then
    echo "‚úÖ package.json trouv√©"
    
    if [ -d "node_modules" ]; then
        echo "‚úÖ node_modules install√©"
    else
        echo "‚ö†Ô∏è  node_modules manquant"
    fi
    
    if [ -d "dist" ]; then
        echo "‚úÖ Build dist existant ($(du -sh dist | cut -f1))"
    else
        echo "‚ö†Ô∏è  Build dist manquant"
    fi
else
    echo "‚ùå package.json manquant"
fi

# 5. Erreurs potentielles
echo ""
echo "‚ö†Ô∏è  Recherche d'erreurs potentielles :"

# Erreurs Python
echo "üêç Erreurs Python potentielles :"
find "$PROJECT_ROOT/backend/src" -name "*.py" -exec python -m py_compile {} \; 2>&1 | head -5 || echo "  Aucune erreur de syntaxe trouv√©e"

# Erreurs dans les logs
if [ -d "$PROJECT_ROOT/backend/logs" ]; then
    echo "üìù Derni√®res erreurs dans les logs :"
    find "$PROJECT_ROOT/backend/logs" -name "*.log" -exec tail -3 {} \; 2>/dev/null | head -5 || echo "  Aucun log d'erreur trouv√©"
fi

echo ""
echo "‚úÖ Diagnostic termin√©"
