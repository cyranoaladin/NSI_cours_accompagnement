name: Security Audit

on:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
    paths:
      - 'requirements*.txt'
      - 'pyproject.toml'
  pull_request:
    paths:
      - 'requirements*.txt'
      - 'pyproject.toml'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip wheels
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-audit-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-audit-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety pip-audit
        
    - name: Run Bandit security scan
      run: |
        echo "🔒 Running Bandit security scan..."
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll -f txt > bandit-summary.txt || true
        
        # Show summary
        echo "## Bandit Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat bandit-summary.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
    - name: Run Safety vulnerability scan
      run: |
        echo "🛡️ Running Safety vulnerability scan..."
        safety check --json --output safety-report.json || true
        safety check --short-report > safety-summary.txt || true
        
        # Show summary
        echo "## Safety Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat safety-summary.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
    - name: Run pip-audit
      run: |
        echo "🔍 Running pip-audit..."
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=text > pip-audit-summary.txt || true
        
        # Show summary
        echo "## Pip-Audit Results" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat pip-audit-summary.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-audit-reports-${{ github.run_number }}
        path: |
          *-report.json
          *-summary.txt
        retention-days: 30
        
    - name: Create security issue
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let issueBody = '🚨 **Security vulnerabilities detected in dependencies!**\n\n';
          
          try {
            const banditSummary = fs.readFileSync('bandit-summary.txt', 'utf8');
            issueBody += '## Bandit Security Scan\n```\n' + banditSummary + '\n```\n\n';
          } catch (e) {}
          
          try {
            const safetySummary = fs.readFileSync('safety-summary.txt', 'utf8');
            issueBody += '## Safety Vulnerability Scan\n```\n' + safetySummary + '\n```\n\n';
          } catch (e) {}
          
          try {
            const pipAuditSummary = fs.readFileSync('pip-audit-summary.txt', 'utf8');
            issueBody += '## Pip-Audit Results\n```\n' + pipAuditSummary + '\n```\n\n';
          } catch (e) {}
          
          issueBody += '**Action Required:**\n';
          issueBody += '1. Review the security scan results\n';
          issueBody += '2. Update vulnerable dependencies\n';
          issueBody += '3. Test the application thoroughly\n';
          issueBody += '4. Close this issue once resolved\n\n';
          issueBody += `**Workflow Run:** [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Security vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['security', 'dependencies', 'high-priority']
          });

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"
        
    - name: Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif
