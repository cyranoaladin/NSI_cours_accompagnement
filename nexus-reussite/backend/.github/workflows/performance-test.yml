name: Performance Testing

on:
  schedule:
    # Run performance tests weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'requirements*.txt'
  workflow_dispatch:
    inputs:
      duration:
        description: 'Test duration in seconds'
        required: false
        default: '300'
        type: string
      users:
        description: 'Number of concurrent users'
        required: false
        default: '50'
        type: string

env:
  PYTHON_VERSION: '3.12'

jobs:
  load-test:
    name: Load Testing with Locust
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nexus_performance
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip wheels
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-perf-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-perf-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install locust
        
    - name: Set up environment variables
      run: |
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/nexus_performance" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=performance-test-key" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-key-for-performance" >> $GITHUB_ENV
        
    - name: Initialize database
      run: |
        python -m flask db upgrade
        python -c "
        from src.app import create_app
        from src.models import db, User
        from faker import Faker
        
        app = create_app()
        fake = Faker()
        
        with app.app_context():
            # Create test users for performance testing
            for i in range(100):
                user = User(
                    email=f'perftest{i}@example.com',
                    nom=fake.last_name(),
                    prenom=fake.first_name(),
                    role='etudiant'
                )
                user.set_password('testpassword')
                db.session.add(user)
            db.session.commit()
        "
        
    - name: Start Flask application
      run: |
        python src/main.py &
        echo $! > flask.pid
        sleep 10  # Wait for app to start
        
    - name: Create Locust performance test
      run: |
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        import random
        import json
        
        class NexusUser(HttpUser):
            wait_time = between(1, 3)
            
            def on_start(self):
                # Login with test user
                user_id = random.randint(0, 99)
                response = self.client.post("/api/auth/login", json={
                    "email": f"perftest{user_id}@example.com",
                    "password": "testpassword"
                })
                if response.status_code == 200:
                    self.token = response.json().get("access_token")
                    self.headers = {"Authorization": f"Bearer {self.token}"}
                else:
                    self.headers = {}
            
            @task(3)
            def get_dashboard(self):
                self.client.get("/api/dashboard", headers=self.headers)
            
            @task(2)
            def get_exercises(self):
                self.client.get("/api/exercises", headers=self.headers)
            
            @task(1)
            def get_profile(self):
                self.client.get("/api/user/profile", headers=self.headers)
            
            @task(1)
            def health_check(self):
                self.client.get("/health")
        EOF
        
    - name: Run Locust load test
      run: |
        DURATION=${{ github.event.inputs.duration || '300' }}
        USERS=${{ github.event.inputs.users || '50' }}
        
        echo "🚀 Starting load test with $USERS users for ${DURATION}s..."
        
        locust -f locustfile.py \
          --host=http://localhost:5000 \
          --users=$USERS \
          --spawn-rate=10 \
          --run-time=${DURATION}s \
          --html=performance-report.html \
          --csv=performance-results \
          --headless
          
    - name: Stop Flask application
      if: always()
      run: |
        if [ -f flask.pid ]; then
          kill $(cat flask.pid) || true
          rm flask.pid
        fi
        
    - name: Generate performance summary
      if: always()
      run: |
        echo "# Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f performance-results_stats.csv ]; then
          echo "## Statistics" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -20 performance-results_stats.csv >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f performance-results_failures.csv ]; then
          echo "## Failures" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -20 performance-results_failures.csv >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results-${{ github.run_number }}
        path: |
          performance-report.html
          performance-results*.csv
        retention-days: 30

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install memory-profiler psutil
        
    - name: Run memory profiling
      run: |
        cat > memory_test.py << 'EOF'
        from memory_profiler import profile
        import psutil
        import os
        from src.app import create_app
        
        @profile
        def test_app_memory():
            app = create_app()
            with app.app_context():
                # Simulate some operations
                for i in range(1000):
                    # Simulate creating objects
                    data = list(range(100))
                    processed = [x * 2 for x in data]
            
            process = psutil.Process(os.getpid())
            memory_info = process.memory_info()
            print(f"Memory usage: {memory_info.rss / 1024 / 1024:.2f} MB")
            return memory_info.rss
        
        if __name__ == "__main__":
            memory_usage = test_app_memory()
        EOF
        
        python memory_test.py > memory-profile.txt 2>&1 || true
        
    - name: Upload memory profile
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: memory-profile-${{ github.run_number }}
        path: memory-profile.txt
        retention-days: 30
        
    - name: Check memory usage threshold
      run: |
        # Extract peak memory usage and check if it exceeds threshold (e.g., 500MB)
        THRESHOLD=500
        if grep -q "Memory usage:" memory-profile.txt; then
          MEMORY_MB=$(grep "Memory usage:" memory-profile.txt | tail -1 | awk '{print $3}')
          MEMORY_INT=${MEMORY_MB%.*}  # Remove decimal part
          
          echo "Peak memory usage: ${MEMORY_MB} MB"
          echo "## Memory Profile Results" >> $GITHUB_STEP_SUMMARY
          echo "Peak memory usage: **${MEMORY_MB} MB**" >> $GITHUB_STEP_SUMMARY
          
          if [ "$MEMORY_INT" -gt "$THRESHOLD" ]; then
            echo "❌ Memory usage exceeds threshold of ${THRESHOLD}MB" >> $GITHUB_STEP_SUMMARY
            echo "::warning::Memory usage (${MEMORY_MB}MB) exceeds threshold (${THRESHOLD}MB)"
          else
            echo "✅ Memory usage within acceptable limits" >> $GITHUB_STEP_SUMMARY
          fi
        fi
