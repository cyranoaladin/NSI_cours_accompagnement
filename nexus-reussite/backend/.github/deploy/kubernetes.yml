---
# Staging Environment
apiVersion: v1
kind: Namespace
metadata:
  name: nexus-staging
  labels:
    environment: staging
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-backend
  namespace: nexus-staging
  labels:
    app: nexus-backend
    environment: staging
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-backend
      environment: staging
  template:
    metadata:
      labels:
        app: nexus-backend
        environment: staging
    spec:
      containers:
      - name: nexus-backend
        image: ghcr.io/nexus-reussite/backend:staging
        ports:
        - containerPort: 5000
        env:
        - name: FLASK_ENV
          value: "staging"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: nexus-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: nexus-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: nexus-secrets
              key: secret-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: nexus-secrets
              key: openai-api-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-backend-service
  namespace: nexus-staging
  labels:
    app: nexus-backend
    environment: staging
spec:
  selector:
    app: nexus-backend
    environment: staging
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-backend-ingress
  namespace: nexus-staging
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - staging-api.nexus-reussite.com
    secretName: nexus-staging-tls
  rules:
  - host: staging-api.nexus-reussite.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-backend-service
            port:
              number: 80
---
# Production Environment
apiVersion: v1
kind: Namespace
metadata:
  name: nexus-production
  labels:
    environment: production
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-backend
  namespace: nexus-production
  labels:
    app: nexus-backend
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: nexus-backend
      environment: production
  template:
    metadata:
      labels:
        app: nexus-backend
        environment: production
    spec:
      containers:
      - name: nexus-backend
        image: ghcr.io/nexus-reussite/backend:latest
        ports:
        - containerPort: 5000
        env:
        - name: FLASK_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: nexus-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: nexus-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: nexus-secrets
              key: secret-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: nexus-secrets
              key: openai-api-key
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-backend-service
  namespace: nexus-production
  labels:
    app: nexus-backend
    environment: production
spec:
  selector:
    app: nexus-backend
    environment: production
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-backend-ingress
  namespace: nexus-production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - api.nexus-reussite.com
    secretName: nexus-production-tls
  rules:
  - host: api.nexus-reussite.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-backend-service
            port:
              number: 80
---
# HorizontalPodAutoscaler for Production
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nexus-backend-hpa
  namespace: nexus-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nexus-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
