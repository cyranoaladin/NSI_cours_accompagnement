#!/usr/bin/env python3
"""
Script d'initialisation de la base de donn√©es pour la PRODUCTION
IMPORTANT: Ce script ne cr√©e AUCUNE donn√©e de d√©monstration
"""

import os
import sys
from datetime import datetime

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app import create_app
from config import get_config
from database import db
from secrets_loader import secrets_loader

# Import des mod√®les
from models.user import User, UserRole, UserStatus
from models.student import Student
from models.formulas import Formula, FormulaType, FormulaLevel


def init_production_database():
    """Initialise la base de donn√©es pour la production"""

    print("üöÄ INITIALISATION BASE DE DONN√âES PRODUCTION")
    print("=" * 60)

    # V√©rifications de s√©curit√© CRITIQUES
    config = get_config()

    # V√©rifier que nous ne sommes pas en mode d√©veloppement
    if os.environ.get('FLASK_ENV') == 'development':
        print("‚ùå ERREUR: FLASK_ENV=development d√©tect√©!")
        print("   Changez FLASK_ENV=production avant de continuer")
        sys.exit(1)

    # V√©rifier la base de donn√©es PostgreSQL
    if 'sqlite' in config.DATABASE_URL.lower():
        print("‚ùå ERREUR: Base de donn√©es SQLite d√©tect√©e!")
        print("   Utilisez PostgreSQL pour la production")
        print("   DATABASE_URL doit commencer par 'postgresql://'")
        sys.exit(1)

    # V√©rifier les secrets critiques
    required_secrets = ['SECRET_KEY', 'JWT_SECRET_KEY', 'DATABASE_URL']
    missing_secrets = []

    for secret in required_secrets:
        value = os.environ.get(secret)
        if not value or value in ['dev-key', 'your-secret-key']:
            missing_secrets.append(secret)

    if missing_secrets:
        print("‚ùå ERREUR: Secrets manquants ou non s√©curis√©s:")
        for secret in missing_secrets:
            print(f"   - {secret}")
        print("\n   Configurez des secrets de production avant de continuer")
        sys.exit(1)

    print("‚úÖ V√©rifications de s√©curit√© pass√©es")
    print(f"üìä Base de donn√©es: {config.DATABASE_URL[:20]}...")
    print(f"üîê Environnement: {os.environ.get('FLASK_ENV', 'non d√©fini')}")

    # Confirmation utilisateur
    print("\n‚ö†Ô∏è  ATTENTION: Cette op√©ration va initialiser la base de donn√©es de PRODUCTION")
    confirmation = input("Tapez 'CONFIRMER' pour continuer: ")

    if confirmation != 'CONFIRMER':
        print("‚ùå Op√©ration annul√©e")
        sys.exit(0)

    # Cr√©ation de l'application
    app = create_app('production')

    with app.app_context():
        print("\nüóÑÔ∏è  Cr√©ation des tables...")

        # Supprimer toutes les tables existantes (ATTENTION!)
        db.drop_all()

        # Cr√©er toutes les tables
        db.create_all()

        print("‚úÖ Tables cr√©√©es avec succ√®s")

        # Cr√©er uniquement l'administrateur principal
        create_admin_user()

        # Cr√©er les formules de base (tarifs r√©els)
        create_production_formulas()

        # Commit final
        db.session.commit()

        print("\nüéâ BASE DE DONN√âES PRODUCTION INITIALIS√âE AVEC SUCC√àS")
        print("=" * 60)
        print("üìã COMPTE ADMINISTRATEUR CR√â√â:")
        print("   Email: admin@nexus-reussite.com")
        print("   Mot de passe: [D√©fini via ADMIN_PASSWORD]")
        print("\n‚ö†Ô∏è  PROCHAINES √âTAPES:")
        print("   1. Connectez-vous avec le compte admin")
        print("   2. Cr√©ez les comptes enseignants r√©els")
        print("   3. Configurez les contenus p√©dagogiques")
        print("   4. Testez toutes les fonctionnalit√©s")


def create_admin_user():
    """Cr√©e uniquement le compte administrateur principal"""

    print("\nüë§ Cr√©ation du compte administrateur...")

    # Mot de passe admin depuis les variables d'environnement
    admin_password = os.environ.get('ADMIN_PASSWORD')
    admin_email = os.environ.get('ADMIN_EMAIL', 'admin@nexus-reussite.com')

    if not admin_password:
        print("‚ùå ERREUR: ADMIN_PASSWORD non d√©fini dans les variables d'environnement")
        print("   D√©finissez un mot de passe fort pour l'administrateur")
        sys.exit(1)

    # V√©rifier la force du mot de passe
    if len(admin_password) < 12:
        print("‚ùå ERREUR: Mot de passe administrateur trop faible")
        print("   Minimum 12 caract√®res requis")
        sys.exit(1)

    # Cr√©er l'administrateur
    admin = User(
        email=admin_email,
        password=admin_password,  # Sera hash√© automatiquement
        first_name="Administrateur",
        last_name="Nexus R√©ussite",
        role=UserRole.ADMIN,
        status=UserStatus.ACTIVE,
        email_verified=True,
        created_at=datetime.utcnow(),
        updated_at=datetime.utcnow()
    )

    db.session.add(admin)
    print(f"‚úÖ Administrateur cr√©√©: {admin_email}")


def create_production_formulas():
    """Cr√©e les formules tarifaires r√©elles (pas de demo)"""

    print("\nüí∞ Cr√©ation des formules tarifaires...")

    # Formules r√©elles bas√©es sur l'√©tude de march√© tunisienne
    production_formulas = [
        {
            "name": "Cours Particulier - Math√©matiques",
            "type": FormulaType.INDIVIDUAL,
            "level": FormulaLevel.INTERMEDIATE,
            "price_dt": 45.0,
            "hours_per_month": 8,
            "description": "Cours particuliers de math√©matiques adapt√©s au programme tunisien",
            "features": [
                "Suivi personnalis√©",
                "Exercices adapt√©s au niveau",
                "Pr√©paration aux examens",
                "Support p√©dagogique inclus"
            ],
            "subject": "mathematiques",
            "grade_levels": ["terminale", "premiere", "seconde"]
        },
        {
            "name": "Cours Particulier - NSI",
            "type": FormulaType.INDIVIDUAL,
            "level": FormulaLevel.ADVANCED,
            "price_dt": 50.0,
            "hours_per_month": 8,
            "description": "Num√©rique et Sciences Informatiques - Sp√©cialit√© Terminale",
            "features": [
                "Programmation Python",
                "Algorithmique avanc√©e",
                "Projets pratiques",
                "Pr√©paration Grand Oral"
            ],
            "subject": "nsi",
            "grade_levels": ["terminale", "premiere"]
        },
        {
            "name": "Cours Particulier - Physique-Chimie",
            "type": FormulaType.INDIVIDUAL,
            "level": FormulaLevel.INTERMEDIATE,
            "price_dt": 45.0,
            "hours_per_month": 8,
            "description": "Sciences physiques et chimiques programme fran√ßais",
            "features": [
                "Exp√©riences et manipulations",
                "R√©solution de probl√®mes",
                "Pr√©paration BAC",
                "Suivi r√©gulier"
            ],
            "subject": "physique",
            "grade_levels": ["terminale", "premiere", "seconde"]
        },
        {
            "name": "Stage Intensif - Pr√©paration BAC",
            "type": FormulaType.WORKSHOP,
            "level": FormulaLevel.ADVANCED,
            "price_dt": 180.0,
            "hours_per_month": 0,  # Stage ponctuel
            "description": "Stage intensif de pr√©paration au Baccalaur√©at (5 jours)",
            "features": [
                "R√©visions compl√®tes",
                "Examens blancs",
                "M√©thodologie",
                "Gestion du stress",
                "Groupe de 8 √©l√®ves maximum"
            ],
            "subject": "multi-disciplinaire",
            "grade_levels": ["terminale"]
        },
        {
            "name": "Accompagnement Grand Oral",
            "type": FormulaType.WORKSHOP,
            "level": FormulaLevel.ADVANCED,
            "price_dt": 120.0,
            "hours_per_month": 4,
            "description": "Pr√©paration sp√©cialis√©e au Grand Oral du Baccalaur√©at",
            "features": [
                "Choix et construction du projet",
                "Entra√Ænements film√©s",
                "Techniques de pr√©sentation",
                "Gestion du stress"
            ],
            "subject": "transversal",
            "grade_levels": ["terminale"]
        }
    ]

    for formula_data in production_formulas:
        formula = Formula(
            name=formula_data["name"],
            type=formula_data["type"],
            level=formula_data["level"],
            price_dt=formula_data["price_dt"],
            hours_per_month=formula_data["hours_per_month"],
            description=formula_data["description"],
            features=formula_data["features"],
            is_active=True,
            created_at=datetime.utcnow(),
            updated_at=datetime.utcnow()
        )
        db.session.add(formula)

    print(f"‚úÖ {len(production_formulas)} formules tarifaires cr√©√©es")


def verify_production_setup():
    """V√©rifie que la configuration de production est correcte"""

    print("\nüîç V√âRIFICATION CONFIGURATION PRODUCTION")
    print("-" * 50)

    # V√©rifications environnement
    checks = [
        ("FLASK_ENV", "production"),
        ("SECRET_KEY", "D√©fini et s√©curis√©"),
        ("JWT_SECRET_KEY", "D√©fini et s√©curis√©"),
        ("DATABASE_URL", "PostgreSQL configur√©"),
        ("REDIS_URL", "Cache configur√©"),
        ("OPENAI_API_KEY", "IA configur√©e (optionnel)"),
        ("SENTRY_DSN", "Monitoring configur√© (optionnel)")
    ]

    all_good = True

    for var, description in checks:
        value = os.environ.get(var)
        if value:
            if var in ['SECRET_KEY', 'JWT_SECRET_KEY']:
                status = "‚úÖ" if len(value) >= 32 and value != 'dev-key' else "‚ùå"
            elif var == 'DATABASE_URL':
                status = "‚úÖ" if 'postgresql://' in value else "‚ùå"
            else:
                status = "‚úÖ"

            print(f"{status} {var}: {description}")
            if status == "‚ùå":
                all_good = False
        else:
            if var in ['OPENAI_API_KEY', 'SENTRY_DSN']:
                print(f"‚ö†Ô∏è  {var}: {description} (optionnel)")
            else:
                print(f"‚ùå {var}: NON D√âFINI")
                all_good = False

    return all_good


if __name__ == "__main__":
    print("üéØ NEXUS R√âUSSITE - INITIALISATION PRODUCTION")
    print("Version: 1.0.0")
    print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # V√©rification pr√©alable
    if not verify_production_setup():
        print("\n‚ùå CONFIGURATION INCOMPL√àTE")
        print("Corrigez les erreurs avant de continuer")
        sys.exit(1)

    # Initialisation
    init_production_database()
