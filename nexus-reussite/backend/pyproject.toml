[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nexus-reussite-backend"
version = "1.0.0"
description = "Plateforme éducative intelligente avec IA adaptative - Backend"
authors = [
    {name = "Nexus Réussite Team", email = "team@nexus-reussite.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
]

[project.urls]
Homepage = "https://github.com/nexus-reussite/backend"
Repository = "https://github.com/nexus-reussite/backend"
Documentation = "https://docs.nexus-reussite.com"
"Bug Tracker" = "https://github.com/nexus-reussite/backend/issues"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | \.tox
  | \.eggs
  | \.pytest_cache
  | __pycache__
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

[tool.pylint]
[tool.pylint.main]
py-version = "3.9"
source-roots = ["src"]
ignore = ["migrations"]

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring", 
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "import-error",
    "no-member"
]

[tool.pylint.format]
max-line-length = 88

[tool.mypy]
python_version = "3.9"
mypy_path = "src"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "flask_*",
    "celery.*",
    "redis.*",
    "sqlalchemy.*",
    "alembic.*",
    "passlib.*",
    "reportlab.*",
    "openai.*",
    "tiktoken.*",
    "pandas.*",
    "numpy.*"
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = [".venv", "tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_command

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-branch",
    "--cov-fail-under=90",
    "--junitxml=reports/junit.xml"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, with database)",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "security: Security tests",
    "slow: Slow running tests",
    "api: API endpoint tests",
    "database: Database tests",
    "auth: Authentication related tests",
    "exercise: Exercise functionality tests",
    "aria: ARIA/AI related tests",
    "rate_limit: Rate limiting tests",
    "asyncio: Asynchronous tests",
    "mutation: Mutation testing compatible"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning"
]
asyncio_mode = "auto"
timeout = 300
