#!/usr/bin/env python3
"""
Script d'initialisation professionnel pour Nexus R√©ussite
V√©rifie l'environnement, initialise la base de donn√©es et lance l'application
"""

import os
import sys
import logging
from pathlib import Path

# Ajouter le r√©pertoire du projet au Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def check_environment():
    """V√©rifie que l'environnement est correctement configur√©"""
    logger.info("üîç V√©rification de l'environnement...")

    # V√©rifier les variables d'environnement critiques
    required_vars = ['OPENAI_API_KEY']
    missing_vars = []

    for var in required_vars:
        if not os.environ.get(var):
            missing_vars.append(var)

    if missing_vars:
        logger.error("‚ùå Variables d'environnement manquantes: %s", ', '.join(missing_vars))
        logger.error("üí° Copiez .env.example vers .env et configurez vos variables")
        return False

    logger.info("‚úÖ Environnement configur√© correctement")
    return True


def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont install√©es"""
    logger.info("üì¶ V√©rification des d√©pendances...")

    try:
        # Import pour v√©rifier la disponibilit√© sans utiliser les modules
        __import__('flask')
        __import__('sqlalchemy')
        __import__('openai')
        __import__('redis')
        logger.info("‚úÖ Toutes les d√©pendances principales sont install√©es")
        return True
    except ImportError as e:
        logger.error("‚ùå D√©pendance manquante: %s", str(e))
        logger.error("üí° Ex√©cutez: pip install -r requirements.txt")
        return False


def initialize_database():
    """Initialise la base de donn√©es"""
    logger.info("üóÑÔ∏è  Initialisation de la base de donn√©es...")

    try:
        # Import dynamique pour √©viter les probl√®mes circulaires
        from src.main_production import create_app

        app = create_app()

        with app.app_context():
            # Import des mod√®les apr√®s la cr√©ation du contexte
            from src.main_production import db
            from src.models.user import User, UserRole

            # Cr√©er les tables
            db.create_all()

            # V√©rifier si un admin existe d√©j√†
            admin = User.query.filter_by(role=UserRole.ADMIN).first()
            if not admin:
                logger.info("üë§ Cr√©ation de l'utilisateur admin par d√©faut...")
                admin = User(
                    email='admin@nexus-reussite.com',
                    first_name='Admin',
                    last_name='Nexus',
                    role=UserRole.ADMIN,
                    password='admin123'  # Sera hash√© automatiquement
                )
                db.session.add(admin)
                db.session.commit()
                logger.info("‚úÖ Utilisateur admin cr√©√© (admin@nexus-reussite.com / admin123)")

        logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
        return True

    except (ImportError, AttributeError, ValueError) as e:
        logger.error("‚ùå Erreur lors de l'initialisation de la base de donn√©es: %s", str(e))
        return False


def run_development_server():
    """Lance le serveur de d√©veloppement"""
    logger.info("üöÄ Lancement du serveur de d√©veloppement...")

    try:
        from src.main_production import create_app

        app = create_app()
        app.run(
            host='0.0.0.0',
            port=5000,
            debug=True,
            use_reloader=True
        )

    except (ImportError, OSError) as e:
        logger.error("‚ùå Erreur lors du lancement du serveur: %s", str(e))
        sys.exit(1)


def main():
    """Fonction principale"""
    logger.info("üéì Initialisation de Nexus R√©ussite...")

    # Changer vers le r√©pertoire du script
    os.chdir(project_root)

    # Charger les variables d'environnement
    try:
        from dotenv import load_dotenv
        env_path = project_root / '.env'
        if env_path.exists():
            load_dotenv(env_path)
            logger.info("üìã Fichier .env charg√©")
        else:
            logger.warning("‚ö†Ô∏è  Aucun fichier .env trouv√©, utilisation des variables syst√®me")
    except ImportError:
        logger.warning("‚ö†Ô∏è  python-dotenv non install√©, variables d'environnement non charg√©es")

    # V√©rifications pr√©alables
    if not check_dependencies():
        sys.exit(1)

    if not check_environment():
        sys.exit(1)

    # Initialisation de la base de donn√©es
    if not initialize_database():
        sys.exit(1)

    # Lancement du serveur
    logger.info("üéâ Nexus R√©ussite pr√™t √† d√©marrer!")
    run_development_server()


if __name__ == "__main__":
    main()
