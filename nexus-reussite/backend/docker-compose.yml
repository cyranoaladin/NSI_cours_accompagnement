version: '3.8'

services:
  # =============================================
  # NEXUS RÉUSSITE - BASE DE DONNÉES POSTGRESQL
  # =============================================
  db:
    image: postgres:15-alpine
    container_name: nexus-postgres
    environment:
      POSTGRES_DB: nexus_reussite
      POSTGRES_USER: nexus_user
      POSTGRES_PASSWORD: nexus_secure_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexus_user -d nexus_reussite"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nexus-network

  # =============================================
  # REDIS POUR CACHE ET SESSIONS
  # =============================================
  redis:
    image: redis:7-alpine
    container_name: nexus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass nexus_redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nexus-network

  # =============================================
  # BACKEND API NEXUS RÉUSSITE
  # =============================================
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: nexus-backend
    environment:
      # Configuration générale
      FLASK_ENV: production
      SECRET_KEY: nexus-reussite-ultra-secret-key-production-2024
      PORT: 5000
      
      # Base de données
      DATABASE_URL: postgresql://nexus_user:nexus_secure_password_2024@db:5432/nexus_reussite
      
      # OpenAI (remplacer par votre vraie clé)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-sk-your-openai-key-here}
      OPENAI_MODEL: gpt-4
      OPENAI_MAX_TOKENS: 1500
      
      # Sécurité
      JWT_SECRET_KEY: jwt-ultra-secret-production-key-2024
      JWT_ACCESS_TOKEN_EXPIRES: 3600
      
      # CORS
      CORS_ORIGINS: http://localhost:3000,http://localhost:5173,https://nexus-reussite.tn
      
      # Redis
      REDIS_URL: redis://:nexus_redis_password@redis:6379/0
      
      # Email (remplacer par vos vrais paramètres)
      MAIL_SERVER: smtp.gmail.com
      MAIL_PORT: 587
      MAIL_USE_TLS: True
      MAIL_USERNAME: ${MAIL_USERNAME:-your-email@gmail.com}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-your-app-password}
      
      # Uploads et limites
      UPLOAD_FOLDER: /app/uploads
      MAX_CONTENT_LENGTH: 16777216
      
      # Monitoring
      LOG_LEVEL: INFO
      
      # Production settings
      PRODUCTION: true
      ENABLE_DEMO_DATA: true
      
    ports:
      - "5000:5000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - nexus-network

  # =============================================
  # NGINX REVERSE PROXY
  # =============================================
  nginx:
    image: nginx:alpine
    container_name: nexus-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html/static
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - nexus-network

  # =============================================
  # MONITORING AVEC PROMETHEUS (OPTIONNEL)
  # =============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: nexus-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - nexus-network
    profiles:
      - monitoring

  # =============================================
  # GRAFANA POUR VISUALISATION (OPTIONNEL)
  # =============================================
  grafana:
    image: grafana/grafana:latest
    container_name: nexus-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: nexus_grafana_admin_2024
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - nexus-network
    profiles:
      - monitoring

# =============================================
# VOLUMES PERSISTANTS
# =============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================
# RÉSEAU INTERNE
# =============================================
networks:
  nexus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
