# ==========================================
# NEXUS RÉUSSITE BACKEND - DOCKERFILE PRODUCTION
# ==========================================
# Multi-stage build pour optimiser la taille et la sécurité

# Stage 1: Builder
FROM python:3.12-alpine as builder

LABEL maintainer="Nexus Réussite <contact@nexus-reussite.com>"
LABEL description="Plateforme éducative intelligente - Backend API"
LABEL version="1.0.0"

# Variables d'environnement pour le build
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Installer les dépendances système pour le build
RUN apk update && apk add --no-cache \
    gcc \
    g++ \
    musl-dev \
    libffi-dev \
    openssl-dev \
    postgresql-dev \
    python3-dev \
    && rm -rf /var/cache/apk/*

# Créer un environnement virtuel
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copier et installer les dépendances Python
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Stage 2: Production
FROM python:3.12-alpine as production

# Variables d'environnement pour la production
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FLASK_APP=src.main_production \
    FLASK_ENV=production \
    PATH="/opt/venv/bin:$PATH"

# Installer uniquement les dépendances runtime nécessaires
RUN apk update && apk add --no-cache \
    postgresql-libs \
    && rm -rf /var/cache/apk/*

# Créer un utilisateur non-root pour la sécurité
RUN addgroup -g 1001 -S nexus && \
    adduser -S nexus -u 1001 -G nexus

# Copier l'environnement virtuel depuis le builder
COPY --from=builder /opt/venv /opt/venv

# Créer les répertoires nécessaires
RUN mkdir -p /app/uploads /app/logs && \
    chown -R nexus:nexus /app

# Définir le répertoire de travail
WORKDIR /app

# Copier le code source
COPY --chown=nexus:nexus . .

# Passer à l'utilisateur non-root
USER nexus

# Exposer le port de l'application
EXPOSE 5000

# Vérification de santé
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000/health')" || exit 1

# Commande par défaut
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "4", "--worker-class", "gevent", "--worker-connections", "1000", "--max-requests", "1000", "--max-requests-jitter", "100", "--preload", "--access-logfile", "-", "--error-logfile", "-", "src.main_production:app"]
