# ==========================================
# NEXUS RÉUSSITE - NGINX PRODUCTION CONFIG
# ==========================================
# Configuration Nginx optimisée et sécurisée pour production
# Basée sur les recommandations de l'audit du 27 juillet 2025

# Configuration générale optimisée
user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # ==============================================
    # CONFIGURATION DE BASE OPTIMISÉE
    # ==============================================
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Optimisations performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Cache et buffers optimisés
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 5;
    open_file_cache_errors off;

    # ==============================================
    # COMPRESSION GZIP/BROTLI
    # ==============================================
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # ==============================================
    # RATE LIMITING GLOBAL
    # ==============================================
    # Zone pour limiter les connexions par IP
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;

    # Zone spéciale pour API/Auth (plus restrictive)
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=3r/m;

    # ==============================================
    # LOGS SÉCURISÉS
    # ==============================================
    log_format security_log '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           '$request_time $upstream_response_time';

    access_log /var/log/nginx/access.log security_log;

    # ==============================================
    # CONFIGURATION SSL/TLS OPTIMISÉE
    # ==============================================
    # Protocoles et ciphers sécurisés (Mozilla Intermediate)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Session SSL optimisée
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # ==============================================
    # HEADERS DE SÉCURITÉ GLOBAUX
    # ==============================================
    # En-têtes de sécurité appliqués à toutes les réponses
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # HSTS (Strict Transport Security) - 1 an avec preload
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # ==============================================
    # REDIRECTION HTTP VERS HTTPS
    # ==============================================
    server {
        listen 80;
        listen [::]:80;
        server_name votre-domaine.com www.votre-domaine.com;

        # Redirect all traffic to HTTPS
        return 301 https://$server_name$request_uri;
    }

    # ==============================================
    # CONFIGURATION HTTPS PRINCIPALE
    # ==============================================
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name votre-domaine.com www.votre-domaine.com;

        # Certificats SSL Let's Encrypt
        ssl_certificate /etc/letsencrypt/live/votre-domaine.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/votre-domaine.com/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/votre-domaine.com/chain.pem;

        # ==============================================
        # CONFIGURATION CSP (Content Security Policy)
        # ==============================================
        # CSP strict pour la sécurité - Ajustez selon vos besoins
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.openai.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' https://fonts.gstatic.com; connect-src 'self' https://api.openai.com; media-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; upgrade-insecure-requests; block-all-mixed-content;" always;

        # ==============================================
        # LIMITATION DES CONNEXIONS ET REQUÊTES
        # ==============================================
        limit_conn conn_limit_per_ip 20;
        limit_req zone=req_limit_per_ip burst=20 nodelay;

        # ==============================================
        # FRONTEND REACT (BUILD STATIQUE)
        # ==============================================
        location / {
            # Servir les fichiers statiques du build React
            root /var/www/nexus-reussite/frontend/dist;
            index index.html;
            try_files $uri $uri/ /index.html;

            # Cache headers pour les assets statiques
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary "Accept-Encoding";
            }

            # Headers de sécurité spécifiques au frontend
            add_header X-Frame-Options "DENY" always;
            add_header X-Content-Type-Options "nosniff" always;
        }

        # ==============================================
        # API BACKEND (FLASK/GUNICORN)
        # ==============================================
        location /api/ {
            # Rate limiting plus strict pour l'API
            limit_req zone=req_limit_per_ip burst=10 nodelay;

            # Proxy vers le backend Flask
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Timeouts optimisés pour l'API
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Buffers optimisés
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;

            # Désactiver le cache pour les réponses API
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }

        # ==============================================
        # ENDPOINTS SENSIBLES (RATE LIMITING STRICT)
        # ==============================================
        # Authentication endpoints avec limitation très stricte
        location ~ ^/api/(auth|login|register)/ {
            limit_req zone=auth_limit burst=5 nodelay;
            limit_req_status 429;

            # Même configuration proxy que l'API générale
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Headers de sécurité renforcés
            add_header X-Frame-Options "DENY" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        }

        # ==============================================
        # UPLOADS DE FICHIERS (SÉCURISÉS)
        # ==============================================
        location /api/upload/ {
            # Limitation taille et type
            client_max_body_size 5M;

            # Rate limiting pour uploads
            limit_req zone=req_limit_per_ip burst=3 nodelay;

            # Proxy vers backend avec timeouts augmentés
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts pour uploads
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # ==============================================
        # MONITORING ET HEALTH CHECKS
        # ==============================================
        location /health {
            proxy_pass http://127.0.0.1:5000/health;
            access_log off;

            # Pas de cache pour health checks
            add_header Cache-Control "no-cache" always;
        }

        location /metrics {
            # Accès restreint aux métriques Prometheus
            allow 127.0.0.1;
            allow 192.168.0.0/16;
            deny all;

            proxy_pass http://127.0.0.1:5000/metrics;
            access_log off;
        }

        # ==============================================
        # SÉCURITÉ - BLOCAGE D'ACCÈS
        # ==============================================
        # Bloquer l'accès aux fichiers sensibles
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Bloquer les extensions dangereuses
        location ~* \.(sh|pl|py|lua|inc|phar|phps|htaccess|htpasswd)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # ==============================================
        # PAGES D'ERREUR PERSONNALISÉES
        # ==============================================
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /404.html {
            root /var/www/nexus-reussite/frontend/dist;
            internal;
        }

        location = /50x.html {
            root /var/www/nexus-reussite/frontend/dist;
            internal;
        }

        # Error page pour rate limiting (429)
        error_page 429 /429.html;
        location = /429.html {
            root /var/www/nexus-reussite/frontend/dist;
            internal;
        }
    }

    # ==============================================
    # CONFIGURATION LOAD BALANCER (SI PLUSIEURS BACKENDS)
    # ==============================================
    # upstream backend_servers {
    #     least_conn;
    #     server 127.0.0.1:5000 max_fails=3 fail_timeout=30s;
    #     server 127.0.0.1:5001 max_fails=3 fail_timeout=30s backup;
    #     keepalive 32;
    # }
}

# ==============================================
# INSTRUCTIONS DE DÉPLOIEMENT
# ==============================================
# 1. Copier ce fichier vers /etc/nginx/nginx.conf
# 2. Modifier les domaines : remplacer votre-domaine.com
# 3. Ajuster les chemins SSL si différents
# 4. Créer les répertoires de logs : mkdir -p /var/log/nginx
# 5. Tester la config : nginx -t
# 6. Recharger : systemctl reload nginx
# 7. Vérifier SSL : https://www.ssllabs.com/ssltest/

# ==============================================
# COMMANDES UTILES
# ==============================================
# Test configuration : nginx -t
# Reload config : nginx -s reload
# Voir les logs : tail -f /var/log/nginx/error.log
# SSL test : openssl s_client -connect votre-domaine.com:443
# Rate limiting test : ab -n 100 -c 10 https://votre-domaine.com/api/test
